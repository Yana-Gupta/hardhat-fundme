{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n//pragma\r\npragma solidity ^0.8.0;\r\n\r\n// constant , immutable\r\n// Error Code\r\nerror FundMe__NotOwner();\r\n\r\n// Libraries / Interfaces / Contracts\r\nimport \"./PriceConvertor.sol\";\r\n\r\n/** @title A contract for collecting fund\r\n * @author Yana Gupta\r\n * @notice\r\n * @dev\r\n */\r\n\r\ncontract FundMe {\r\n  // Type Declaration\r\n  using utils for uint256;\r\n\r\n  uint256 public constant MINIMUMUSD = 1;\r\n  address[] public getFunder;\r\n  mapping(address => uint256) public getAddressToAmmount;\r\n  address public immutable i_owner;\r\n  AggregatorV3Interface public getPriceFeed;\r\n\r\n  constructor(address priceFeedAddress) {\r\n    i_owner = msg.sender;\r\n    getPriceFeed = AggregatorV3Interface(priceFeedAddress);\r\n  }\r\n\r\n  function fund() public payable {\r\n    require(\r\n      msg.value > MINIMUMUSD.getConversionRate(getPriceFeed),\r\n      \"DIDN'T SEND ENOUGH.\"\r\n    );\r\n    getFunder.push(msg.sender);\r\n    getAddressToAmmount[msg.sender] = msg.value;\r\n  }\r\n\r\n  function withdraw() public onlyOwner {\r\n    for (\r\n      uint256 funderIndex = 0;\r\n      funderIndex < getFunder.length;\r\n      funderIndex++\r\n    ) {\r\n      address funder = getFunder[funderIndex];\r\n      getAddressToAmmount[funder] = 0;\r\n    }\r\n    getFunder = new address[](0);\r\n\r\n    (bool callSuccess, ) = payable(msg.sender).call{\r\n      value: address(this).balance\r\n    }(\"\");\r\n\r\n    require(callSuccess, \"Call Failed\");\r\n  }\r\n\r\n  // Making cheaper withdraw function\r\n  function cheaperWithdraw() public payable onlyOwner {\r\n    address[] memory funders = getFunder;\r\n    // mapping cannor be stored in memory\r\n    for (\r\n      uint256 funderIndex = 0;\r\n      funderIndex < funders.length;\r\n      funderIndex++\r\n    ) {\r\n      address funder = funders[funderIndex];\r\n      getAddressToAmmount[funder] = 0;\r\n    }\r\n\r\n    getFunder = new address[](0);\r\n    (bool success, ) = i_owner.call{value: address(this).balance}(\"\");\r\n    require(success);\r\n  } \r\n\r\n  receive() external payable {\r\n    fund();\r\n  }\r\n\r\n  fallback() external payable {\r\n    fund();\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    if (msg.sender != i_owner) {\r\n      revert FundMe__NotOwner();\r\n    }\r\n    _;\r\n  }\r\n}\r\n"
    },
    "contracts/PriceConvertor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary utils { \r\n    function ethToUSD(\r\n        AggregatorV3Interface PriceFeed\r\n    ) internal view returns (uint256) {\r\n        (, int256 price, , , ) = PriceFeed.latestRoundData();\r\n        return uint256(price * 1e10);\r\n    }\r\n\r\n    function getConversionRate(\r\n        uint256 dollarAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        return ((dollarAmount * 1e36) / ethToUSD(priceFeed));\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}